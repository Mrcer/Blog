<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咩咩的博客</title>
  
  
  <link href="https://mrcer.gitee.io/Blog/atom.xml" rel="self"/>
  
  <link href="https://mrcer.gitee.io/Blog/"/>
  <updated>2022-02-16T15:03:46.478Z</updated>
  <id>https://mrcer.gitee.io/Blog/</id>
  
  <author>
    <name>咩咩</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自学资源分享</title>
    <link href="https://mrcer.gitee.io/Blog/2022/02/08/%E8%87%AA%E5%AD%A6%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    <id>https://mrcer.gitee.io/Blog/2022/02/08/%E8%87%AA%E5%AD%A6%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/</id>
    <published>2022-02-08T11:16:38.000Z</published>
    <updated>2022-02-16T15:03:46.478Z</updated>
    
    <content type="html"><![CDATA[<p>这是一则我自学及开发使用的资源的分享，，希望对你有帮助~</p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a><a href="https://code.visualstudio.com/">Visual Studio Code</a></h2><p>微软家的全能编辑器，免费开源、好看易用、启动迅速，支持Windows和Linux。需要注意的是VS Code不是一个ide，这意味着它本身是不能编译程序的。然而这也意味着只需要经过简单（大概？）的配置，你就可以用它做任何事情，包括编写任何语言的程序和写博客（对我现在就在用VS Code）。<br><img src="vscode.png" width="50%"/><br>你可以在<a href="https://blog.gztime.cc/posts/2020/6b9b4626/#%E5%89%8D%E8%A8%80">gz的博客</a>那里学会简单的配置。</p><p>VSCode最厉害的地方在于他有一个庞大的拓展库，你可以在里面找到各种东西。比如说你看到上面的插图中有一只魔理沙，那个是background插件，其他的还有各种语言配套的语言插件啦，用AI来完成自动补全的Tabnice插件啦，二进制文件查看的hexdump啦，写博客用markdown语言有Markdown All in One插件啦。总之有了VSCode，其他编辑器我都再也没用啦！</p><h2 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio</a></h2><p>Visual Studio是微软家的IDE，可以开发.NET、C++等等。与VSCode不同的是，VS是以项目为单位来开发的，而VSCode一般以文件为单位编译运行，同时VS本身就包含了IDE应有的编译、调试、打包等功能。然而，这些功能的代价是庞大的安装体积和较慢的启动速度。</p><p>一般我小的项目我都会用VSCode，只有项目太大，需要链接库之类的时候我才会用VSCode，比如学习OpenGL。</p><p>既然说到IDE我顺便把其他的也说了吧，毕竟那些都是在开发相应程序的时候才需要了解的，就不单独说啦。比如开发Java可以用<a href="https://www.jetbrains.com/idea/">Intellij idea</a>（只在开发MC模组的时候用），开发Python可以用<a href="https://www.jetbrains.com/pycharm/">PyCharm</a>（没用过），开发安卓应用可以用<a href="https://developer.android.google.cn/studio/">Android Studio</a>（没咋用过，倒是AIDE用过）等等。</p><h2 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a><a href="https://www.runoob.com/">菜鸟教程</a></h2><p>我首选的学习语言的网站。这个网站优点就在于主要的语言乃至一些技术都有教程，而且还是中文！不仅如此，网站内容意简言赅，没有半句废话，特别适合有经验的人学习新语言。然而这个网站部分内容存在过时（比如Python教程就是2&#x2F;3混在一起的），有些内容因为精简也省略了，还有大部分库都没有详细的介绍。如果你需要了解一门语言的具体技术细节的话不妨参考文档，比如<a href="https://www.cplusplus.com/reference/">c++ reference</a>，<a href="https://www.python.org/doc/">Python文档</a>等等。不过你要做好啃生肉的准备。</p><h2 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a><a href="https://www.bilibili.com/">bilibili</a></h2><p>是的，B站大学实至名归，从编程到电焊，从医学到数学，你能找到各种学习内容，这里简单分享几个：</p><ol><li>3Blue1Brown：分享数学知识的up主，我线代96分，一半是他教的。不下饭，要经常暂停。</li><li>硬件茶谈：分享硬核硬件常识的up主，看完你就能自己装电脑了。</li><li>稚晖君：告诉你学霸可以做到什么地步</li><li>LinusTechTips：老莱的计算机科普，教你各种计算机相关的冷知识</li><li>极客湾Geekerwan：硬件评测，是个折腾的up主，让你能紧跟时代潮流，看懂最新硬件。</li><li>BranchEducation：一个介绍计算机原理的新up，看起来可视化有点东西，可以了解一下</li><li>Chubbyemu：分享临床医学案例的up主，很下饭，还能教你基本的医学常识</li><li>学院派Academia：分享社科知识的up主，非常硬核，下饭催眠都很好用</li><li>罗翔说刑法：教法律知识的，下饭，也能培养三观</li><li>人民医学：简单的医学科普</li><li>爱上半导体：电子信息专业的可以看看，讲半导体相关的，可视化做得不错</li><li>六层楼先生：妇产科医生，性科普做得不错</li><li>阿林吃土：教做饭的，小白入门级</li></ol><p>还有一些泛科普的、教音乐美术的、教建模的、教特效剪辑的、教游戏理论的、教物理化学的、教历史的、甚至教昆虫的、教你学习的。想了解的可以关注我B站号：深海菠萝小狮子。</p><p>值得一提的是，B站的科普是面向所有人的，优点是可视化程度高，以视频形式展现容易看懂，但缺点也很明显：</p><ol><li>很少有系统讲解知识的，大部分都是简化过的知识，只可以当做初步了解。</li><li>科普up的知识也是有限的，也许会有错误内容，甚至有的up会夹带私货，观看时要时刻保持辩证思维。</li><li>up主为了恰饭有时需要打广告。</li></ol><p>如果你真的想系统学习某种知识，你最好找那种分十几p的视频，或者直接去中国大学mooc学。</p><h2 id="Termux"><a href="#Termux" class="headerlink" title="Termux"></a><a href="https://termux.com/">Termux</a></h2><p>一个运行在安卓上的Linux终端。使用这个软件你可以在手机上写程序、跑代码、连接服务器、学习Linux、装逼等等。终端，也就是说没有图形界面，同时自带的Linux系统也是非常简洁的（软件包才97M），你需要安装许多软件，非常折腾。如果你不想折腾，<a href="https://www.aidlux.com/">AidLearning</a>可能也不错，预装了完整的系统和各种软件，不过占用空间非常大，也比较卡，让本来就不太实用的东西更不实用了哈哈哈（当然主要是软件不会用）。</p><p>这里简单说一下这个软件怎么用吧，以后还会写折腾笔记的。</p><p>你首先得先学会Linux的基本操作，这个菜鸟教程有，包括目录操作命令、新建复制粘贴软件安装命令（软件自带pkg作为包管理器，apt也行）。然后安装vim作为文本编辑器，需要开发C++的话装g++，需要运行python就装python之类的。你还能用nmap扫端口（不过官网说软件库不提供黑客工具，你得自己整），ping服务器，查看网络设置等等。</p><p>当然如果你只是想学Linux的话还有很多选择，最简单的就是WSL，也可以像我以前大佬那样塞个系统进U盘，也不是不行。</p><h2 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a>Jupyter</h2><p>你想学习Python的库吗？快用Jupyter！这种全新的交互方式将markdown和python结合在一起，让你的学习笔记能跑代码。来，直接上图！<br><img src="Jupyter.png" width="80%"/></p><p>这个博客是零基础的，这里简单介绍一下markdown和python。</p><p>Markdown是一个轻量级的标记语言，你可以理解为超简单的word。首先，用MD你就不需要鼠标了，标题直接用<code>#</code>，多少级标题就用多少个<code>#</code>，你不需要调字体大小；加粗斜体都用<code>*</code>；还有插入链接、代码框、注释等都是非常方便的。插入数学公式、插入图片、插入表格当然也能做到，不过有点小麻烦，可以用一些对应的工具来简化。MD本身是个纯文本文件，需要渲染器才能显示效果，你可以理解为源文件和编译。btw，这篇博客基本上就是用Markdown写的。<br><img src="md.png" width="80%"/></p><p>Python是一个简单的脚本语言，但是很多东西都能干。当然，这样强大的功能是依赖库的，比如你学会Sympy就能完成很多平常要在Matlab完成的操作，学会Pillow就可以用代码处理图片，还有人工智能很多都是有Python接口的。</p><p>安装也很简单，先装个python，然后命令行跑个<code>pip install jupyterlab</code>安装jupyter和更好看的前端界面，完成。接下来命令行运行<code>jupyter lab</code>你就启动了jupyter服务器了，读一下命令行的文字，用浏览器打开那个网址，你就进入到jupyter了。如果你想用更接近你平常用软件的方式工作的话，VSCode有Jupyter插件，你装好python和jupyter之后再打开VSCode装Jupyter插件就可以像打开一个普通文件一样打开<code>.ipynb</code>的notebook文件了。</p><h2 id="一些其他的网站"><a href="#一些其他的网站" class="headerlink" title="一些其他的网站"></a>一些其他的网站</h2><ol><li><a href="https://www.kaggle.com/">kaggle</a>：一个学习机器学习的网站</li><li><a href="https://leetcode-cn.com/">leetcode</a>：刷题网站，不多说</li><li><a href="https://ctf-wiki.org/">ctf-wiki</a>：学习CTF技能的</li><li><a href="https://oi-wiki.org/">oi-wiki</a>：学算法的</li></ol><p>（未完待续，咕咕咕）</p>]]></content>
    
    
    <summary type="html">这是一则我自学及开发使用的资源的分享，希望对你有帮助~</summary>
    
    
    
    
    <category term="资源分享" scheme="https://mrcer.gitee.io/Blog/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>计网自学笔记（二）</title>
    <link href="https://mrcer.gitee.io/Blog/2022/02/08/%E8%AE%A1%E7%BD%91%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://mrcer.gitee.io/Blog/2022/02/08/%E8%AE%A1%E7%BD%91%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-02-08T07:14:26.000Z</published>
    <updated>2022-02-08T14:07:26.494Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：这个笔记是《计算机网络-自顶而下方法-第6版》第二章的笔记，叙述框架保持与课本一致，进行了一定程度的简化和梳理。第一章的笔记还没有整理，等整理好再放出。<br>之前有本来准备写一份科普的，结果发现我现在能力还不足以全面阐述这个话题，所以还是放弃了。现阶段还是先加油学习吧。后面我会放出我感兴趣的技术栈以及自学资源，希望大家和我一起进步呀！</p></blockquote><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>应用层利用传输层（接口叫套接字socket），完成网络应用程序功能。</p><h2 id="网络应用程序结构"><a href="#网络应用程序结构" class="headerlink" title="网络应用程序结构"></a>网络应用程序结构</h2><p>不同于上一章网络的体系结构，应用开发者将网络视作提供固定服务的黑箱，并在此基础上设计在各种端系统上组织应用程序的规则，称为网络应用程序结构。以下是主流的两种网络应用程序结构：</p><ol><li>客户-服务器体系结构<br>最常见的类型。拿浏览网页举例，网站提供方充当服务端，浏览器充当客户端，浏览器向网站提供方发出请求，网站提供方作出响应返回被请求的数据。为了处理这些请求，服务提供者需要根据客户的增多调整服务，以此适应不断增多的请求。</li><li>P2P体系结构<ul><li>优势<ul><li>自扩展性<br>用户端越多服务端也越多，不必因为用户的增加而改变程序结构</li><li>成本有效<br>对中心服务器要求低，软件的网络成本可控</li></ul></li><li>挑战<ul><li>对ISP的挑战：<br>P2P网络对上行带宽要求高</li><li>对安全性的挑战<br>P2P网络高度分布、开放，设计难度高</li><li>对激励的挑战<br>P2P的平等性需要适当的机制来防止只享受不劳动的寄生虫的出现</li></ul></li></ul></li></ol><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul><li><p>客户和服务器进程  </p><p>应用层定义了进程间的通信，其中发起通信的一方被称为客户(host)，等待通信的一方被称为服务器(server)。</p><p>一个程序可以有多个进程，也就可以同时作为客户端和服务端</p></li><li><p>进程与计算机网络的接口<br>应用层是基于运输层提供的端到端通信来实现的，应用层可以选择运输层协议并设定其中的一些参数</p></li><li><p>进程寻址<br>为了定义一个进程的准确地址，我们需要两个信息，一个是定义端系统地址的IP地址，另一个是定义系统中特定进程网络地址的端口号</p></li></ul><h2 id="可供应用程序选择的运输服务"><a href="#可供应用程序选择的运输服务" class="headerlink" title="可供应用程序选择的运输服务"></a>可供应用程序选择的运输服务</h2><p>应用层的数据（报文）是通过传输层提供的接口（套接字Socket）来传输的，传输层完成了从一个的套接字到另一个套接字的数据传输。不同的传输层协议实现了不同的功能，应用层协议选择运输层协议时可以参考以下标准：</p><ol><li>可靠性<br>即数据是否必须全部到达另一个套接字，顺序是否不能改变</li><li>吞吐量<br>即传输数据的速率</li><li>定时<br>即延迟，数据到达另一个套接字所需时间</li><li>安全性<br>数据是否不能被嗅探，是否需要验证完整性等<br>目前因特网提供了两种传输层协议——TCP与UDP，他们的特点如下：</li><li>TCP协议<ul><li>面向连接<br> 在数据传输前需要交换传输层控制信息（即握手），并在这之后维持这个连接（需要手动断开），这个连接是双工的（数据双向传输）</li><li>提供可靠数据传输<br> 保证无差错、有顺序地传输数据</li><li>拥塞控制<br> 控制发送过程保证网络使用者公平分享带宽<blockquote><p>TCP不提供加密，数据可能会被中间链路嗅探，可以使用安全套接字层SSL来实现安全传输。SSL是TCP的加强版</p></blockquote></li></ul></li><li>UDP协议<br>仅提供最小连接服务，无连接、不可靠、没有拥堵控制。</li></ol><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><p>应用层协议规定了报文的语法和含义，以及一个进程何时以及如何发送报文。应用层协议是根据应用的功能来设计的，既有公有协议也有专用协议。以下是一些常见网络应用及其使用的公有协议：</p><h3 id="Web和HTTP"><a href="#Web和HTTP" class="headerlink" title="Web和HTTP"></a>Web和HTTP</h3><h4 id="HTTP概况"><a href="#HTTP概况" class="headerlink" title="HTTP概况"></a>HTTP概况</h4><p>Web应用即我们在浏览器浏览的网站，他使用的是HTTP协议。你可以在网址的前面看到http，现在通常是https，这其实是http与ssl的结合。</p><p>Web页面由对象组成，一个对象就是一个文件（不过根据实际需要的不同，同一个url可以返回不同版本的文件）。你可以在任意网页右键审查元素，在网络Network选单中看到加载的对象（需要刷新页面）。为了获取这些对象，浏览器需要得到他们的“位置”，即url。url由存放对象的主机名和对象的路径名组成，如<code>http://www.a.com/b/c.jpg</code>中<code>www.a.com</code>就是主机名，<code>b/c.jpg</code> 就是对象路径。</p><p>Web应用采用的是客户-服务器体系结构，其中客户端就是Web浏览器，服务端就是Web服务器。前者大家都很熟悉，后者包括Apache和微软的IIS等。</p><blockquote><p>之前提到定义一个进程的准确位置需要ip地址和端口，而url只是一串字符串，它是怎么定位Web服务器进程的呢？实际上，url中的主机名部分会被发送到DNS服务器解析成ip地址，而端口在不标注的情况下默认是80端口。</p></blockquote><p>HTTP定义了：</p><ol><li>浏览器向服务器发送请求报文的方式，以及服务器接收到请求报文后发送响应报文的方式。</li><li>传输层协议为TCP协议。</li><li>协议是无状态的，也就是说服务器不会保存用户信息，它在发出响应报文后就已经完成了一个周期的工作。<blockquote><p>这里说不保存用户信息指的是HTTP定义的工作流程，实际上在接受到请求报文后服务器可以根据报文内容进行相关处理，这个处理过程就可以完成保存用户信息等操作。</p></blockquote></li></ol><h4 id="非持续连接和持续连接"><a href="#非持续连接和持续连接" class="headerlink" title="非持续连接和持续连接"></a>非持续连接和持续连接</h4><p>网络应用程序通常要传输多个文件，这时需要决定不同文件是用同一个TCP连接传输还是独立多个TCP连接传输，前者称为持续连接，后者称为非持续连接。HTTP默认使用持续连接，但也可以选择使用非持续连接。</p><p>非持续连接可以提供更高的并行度，即可以同时在几个TCP连接上传输文件，但这也带来更高的时延和处理压力，因为建立TCP连接是需要时间和运算的。</p><blockquote><p>建立TCP需要的三次握手：即建立TCP连接需要发送三次报文。第一次是TCP连接发起方（客户端）发出小TCP报文段，第二次是服务器接收到后发出一个小TCP报文段做出确认和响应，第三次是客户向服务器返回确认，HTTP请求报文会跟随第三次握手发送。加上服务器发送响应报文的时间，整个请求响应过程需要两个往返时间（Round-Trip Time, RTT）</p></blockquote><h4 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h4><ol><li><p>请求报文<br> 请求报文用ASCII编码，由第一行的请求行(request line)和后续的首部行(header line)以及一段空行后的实体体(entity body)组成。典型的一则请求报文如下</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /somedir/page.html HTTP/1.1</span><br><span class="line">Host: www.someschool.edu</span><br><span class="line">Connection: close</span><br><span class="line">User-agent: Mozilla/5.0</span><br><span class="line">Accept-language: fr</span><br></pre></td></tr></table></figure><p> 请求行包含了请求报文的主要信息，包括方法字段、url字段和HTTP版本字段。方法字段可以为<code>GET</code>、<code>POST</code>、<code>HEAD</code>、<code>PUT</code>、<code>DELETE</code>，其中最常用的GET就表示请求获得对象，这个对象由url字段定义。HEAD方法类似于GET方法，区别是不返回对象，可以用来判断对象状态。PUT和DELETE分别是上传和删除对象。</p><p> 首部行包含了请求报文的其他信息，可以是Host（指定对象所在主机），Connection（使用的TCP连接是否持续），User-agent（浏览器标识）等等。</p><p> 在首部行空一行后是实体体，他包含了请求报文的附带信息。这在使用<code>GET</code>等方法时为空，而在使用<code>POST</code>方法时包含了提交的表单信息（比如你登陆网页时提交的用户名和密码）</p><blockquote><p>其实<code>GET</code>方法也可以附带信息，只是信息不在实体体中而在url中，比如<code>www.a.com/search?word=helloworld</code>，这里<code>?</code>后面就附带了信息。你可以在使用搜索引擎时在地址栏看到他的使用。</p></blockquote><blockquote><p>你同样可以使用浏览器的审查元素中的网络功能查看请求报文及其响应，不过浏览器一般会对原始报文进行格式处理。你也可以使用telnet（Windows默认关闭了），向任意网站发送原始的请求并获得响应。</p></blockquote></li><li><p>响应报文<br> 与请求报文类似，响应报文用ASCII编码，由第一行的初始状态行(status line)，接下来的首部行(header line)，和首部行空一行后的实体体(entity body)。典型的一则响应报文如下</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: close</span><br><span class="line">Date: Tue, 09 Aug 2011 15:44:04 GMT</span><br><span class="line">Server: Apache/2.2.3 (CentOS)</span><br><span class="line">Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT</span><br><span class="line">Content-Length: 6821</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">(data data data data data ...)</span><br></pre></td></tr></table></figure><p> 状态行有三段，协议版本字段、状态码和相应状态信息。在这个例子中，状态行指示服务器正在使用HTTP&#x2F;1.1，并且一切正常（即服务器已经找到并正在发送所请求的对象）。</p><p> 常见的状态码和相关短语包括：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">200 OK： 请求成功，信息在返回的响应报文中。</span><br><span class="line">301 Moved Permanently： 请求的对象已经被永久转移了，新的URL定义在响应报文的Location: 首部行中</span><br><span class="line">400 Bad Request：一个通用差错代码，表示该请求不能被服务器理解。</span><br><span class="line">404 Not Found：被请求的文档不在服务器上。</span><br><span class="line">505 HTTP Version Not Support： 服务器不支持请求报文使用的HTTP协议版本</span><br></pre></td></tr></table></figure><p> 首部行中Connection字段定义与请求报文相同，即发送完报文后即关闭TCP连接；Date指示服务器产生并发送该响应报文的日期和时间；Server指示服务器类型及运行系统；Last-Modified即文件最后修改时间；Content-Length即文件长度（字节）；Content-Type指示对象类型（对象类型并不是用文件拓展名指示的）</p><p> 在现实生活中，浏览器和服务器会根据用户配置自动设置首部行，以获得最佳的浏览体验。比如浏览器可以在第一次访问时缓存网页对象，在下一次访问时请求对象最后修改时间，如果对象没有经过修改就可以直接使用缓存对象，节省带宽。</p></li></ol><h4 id="用户与服务器的交互：cookie"><a href="#用户与服务器的交互：cookie" class="headerlink" title="用户与服务器的交互：cookie"></a>用户与服务器的交互：cookie</h4><p>出于性能考虑，HTTP协议是无状态的，但为了实现用户登陆等功能，服务器与客户端都需要存储某些状态信息。这可以采用cookie（对就是曲奇hhh）技术。</p><p>cookie技术有4个组件：</p><ol><li>响应报文中的一个cookie首部行</li><li>请求报文中的一个cookie首部行</li><li>用户端系统中保留有一个cookie文件，并由浏览器管理</li><li>Web站点的一个后端数据库</li></ol><p>一个使用cookie技术的例子：</p><ol><li>网站返回的响应报文中附带<code>Set-cookie: 1678</code>首部行，并将<code>1678</code>作为用户识别码储存在服务器数据库</li><li>浏览器接收到HTTP响应报文后将<code>1678</code>添加到cookie文件中，并在下一次访问这个网站时在HTTP请求报文的首部行中添加<code>Cookie: 1678</code>。值得注意的是不同网站并不共享cookie。</li><li>网站接收到<code>1678</code>识别码后，就能够将用户行为关联到这个识别码上，这样就可以在无状态的HTTP上建立一个用户会话层，实现自动登录、个性化推荐等功能。</li></ol><p>然而cookie可能涉及隐私问题，所以一些网站会询问你是否接受cookie。</p><h4 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h4><p>Web缓存（Web cache）也叫代理服务器（proxy server），它通过储存原始网站的文件来加快访问速度。</p><p>举个例子，校园网可以建立一个缓存器，当学生访问外国学术网站资源时，浏览器会先向这个缓存器发送请求，这个缓存器再向学术网站请求文件。请求到的文件不仅会发送一份给浏览器，也会保留一份在缓存器，这样下一次再有学生访问这个资源就不需要再向原始网站请求文件，而是可以直接返回缓存文件了。</p><p>Web缓存在缓存命中（即缓存器刚好有需要的文件）时可以避免直接访问原始网站，这样有几个优势：</p><ol><li>如果原始网站延迟比较大或者带宽比较小，这样可以降低延迟、减小响应时间。</li><li>可以减小原始网站的服务器压力</li></ol><h4 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h4><p>Web缓存的出现引入了一个新问题，那就是Web缓存器的对象有可能是陈旧的。为了保证Web缓存器储存的对象与源服务器对象一致，Web缓存器可以向源服务器发送<strong>条件GET（conditional GET）</strong>方法来询问其储存的对象是否是最新的。这个HTTP请求报文使用GET方法，同时在首部行中包含<code>If-Modified-Since:</code>，即Web缓存中对象的最后修改日期。这个最后修改日期来自于Web缓存对象时获得的响应报文的<code>Last-Modified:</code>首部行。接下来源服务器会检查请求的对象的最后修改日期是否与Web缓存的一致。如果一致，返回的报文中实体体就是空的，返回状态码为<code>304 Not Modified</code>。</p><h3 id="文件传输和FTP"><a href="#文件传输和FTP" class="headerlink" title="文件传输和FTP"></a>文件传输和FTP</h3><p>就像在本地打开资源管理器管理本地文件一样，FTP协议做到了通过网络管理远程主机的文件。</p><p>FTP协议运行在TCP上，且使用了两个TCP连接，一个是<strong>控制连接</strong>（control connection），一个是<strong>数据连接</strong>（data connection）。控制连接位于21端口，负责传输用户名及密码、改变目录的命令以及“存放”和“获取”文件的命令。数据连接位于20端口，负责实际传输一个文件。</p><blockquote><p>因为FTP的控制信息使用独立的控制连接，所以称FTP的是<strong>带外</strong>（out-of-band）传输的。而HTTP协议使用同一个TCP连接发送请求和响应首部行，因此称HTTP是<strong>带内</strong>（in-band）发送控制信息的。</p></blockquote><p>控制连接是持续的TCP连接，而数据连接是非持续的。这意味着整个会话使用同一个控制连接，而每次发起一个传输文件的命令都会打开一个数据连接。</p><p>FTP协议是有状态的，FTP服务器需要保存用户的状态，包括用户账户和控制连接的关联、远程目录树上的当前位置等。有状态的协议满足了追踪用户会话状态信息的要求，但也大大限制了FTP同时维持的会话总数。而另一方面HTTP是无状态的，即它不必对任何用户状态进行追踪。</p><h4 id="FTP命令和回答"><a href="#FTP命令和回答" class="headerlink" title="FTP命令和回答"></a>FTP命令和回答</h4><p>FTP的命令和回答都是ASCII码在控制连接上传输的，每条命令由4个大写字母组成，一条命令空格后可以附带可选参数。</p><p>常用的FTP命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USER username：发送用户名</span><br><span class="line">PASS password：发送密码</span><br><span class="line">LIST：请求返回当前远程目录中的所有文件列表，该列表将通过数据连接传输</span><br><span class="line">RETR filename：获取文件</span><br><span class="line">STOR filename：存放文件</span><br></pre></td></tr></table></figure><p>常见的FTP回答：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">331 Username OK, Password required（用户名OK，需要密码）</span><br><span class="line">125 Data connection already open; transfer starting（数据连接已打开，开始传输文件）</span><br><span class="line">425 Can&#x27;t open data connection（无法打开数据连接）</span><br><span class="line">452 Error writing file（写文件错误）</span><br></pre></td></tr></table></figure><p>详见RFC 959</p><h3 id="电子邮件和SMTP、POP3、IMAP"><a href="#电子邮件和SMTP、POP3、IMAP" class="headerlink" title="电子邮件和SMTP、POP3、IMAP"></a>电子邮件和SMTP、POP3、IMAP</h3><h3 id="域名解析和DNS"><a href="#域名解析和DNS" class="headerlink" title="域名解析和DNS"></a>域名解析和DNS</h3><h3 id="文件分发和BitTorrent协议"><a href="#文件分发和BitTorrent协议" class="headerlink" title="文件分发和BitTorrent协议"></a>文件分发和BitTorrent协议</h3><h2 id="TCP套接字编程"><a href="#TCP套接字编程" class="headerlink" title="TCP套接字编程"></a>TCP套接字编程</h2><h2 id="UDP套接字编程"><a href="#UDP套接字编程" class="headerlink" title="UDP套接字编程"></a>UDP套接字编程</h2><p>（未完待续）</p>]]></content>
    
    
    <summary type="html">《计算机网络-自顶而下方法-第6版》第二章笔记</summary>
    
    
    
    <category term="笔记分享" scheme="https://mrcer.gitee.io/Blog/categories/%E7%AC%94%E8%AE%B0%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="计算机网络" scheme="https://mrcer.gitee.io/Blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
